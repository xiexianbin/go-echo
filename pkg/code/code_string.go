// Code generated by "stringer -type=Code"; DO NOT EDIT.

package code

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CodeOK-100200]
	_ = x[CodeCreated-100201]
	_ = x[CodeAccepted-100202]
	_ = x[CodeNonAuthoritativeInfo-100203]
	_ = x[CodeNoContent-100204]
	_ = x[CodeBadRequest-100405]
	_ = x[CodeUnauthorized-100406]
	_ = x[CodePaymentRequired-100407]
	_ = x[CodeForbidden-100408]
	_ = x[CodeNotFound-100409]
	_ = x[CodeMethodNotAllowed-100410]
	_ = x[CodeNotAcceptable-100411]
	_ = x[CodeProxyAuthRequired-100412]
	_ = x[CodeRequestTimeout-100413]
	_ = x[CodeConflict-100414]
	_ = x[CodeUnKnown-100415]
}

const (
	_Code_name_0 = "CodeOKCodeCreatedCodeAcceptedCodeNonAuthoritativeInfoCodeNoContent"
	_Code_name_1 = "CodeBadRequestCodeUnauthorizedCodePaymentRequiredCodeForbiddenCodeNotFoundCodeMethodNotAllowedCodeNotAcceptableCodeProxyAuthRequiredCodeRequestTimeoutCodeConflictCodeUnKnown"
)

var (
	_Code_index_0 = [...]uint8{0, 6, 17, 29, 53, 66}
	_Code_index_1 = [...]uint8{0, 14, 30, 49, 62, 74, 94, 111, 132, 150, 162, 173}
)

func (i Code) String() string {
	switch {
	case 100200 <= i && i <= 100204:
		i -= 100200
		return _Code_name_0[_Code_index_0[i]:_Code_index_0[i+1]]
	case 100405 <= i && i <= 100415:
		i -= 100405
		return _Code_name_1[_Code_index_1[i]:_Code_index_1[i+1]]
	default:
		return "Code(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
